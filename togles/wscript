#! /usr/bin/env python
# encoding: utf-8

from waflib import Utils
import os

top = '.'
PROJECT_NAME = 'togl'

def options(opt):
	# stub
	return

def configure(conf):
	conf.define('TOGL_DLL_EXPORT',1)
	conf.env.append_unique('DEFINES',['strncpy=use_Q_strncpy_instead',
		'_snprintf=use_Q_snprintf_instead'])

def build(bld):
	source = [
		'linuxwin/dx9asmtogl2.cpp',
		'linuxwin/dxabstract.cpp',
		'linuxwin/glentrypoints.cpp',	
		'linuxwin/glmgr.cpp',			
		'linuxwin/glmgrbasics.cpp',	
		#'linuxwin/glmgrcocoa.mm',					[$OSXALL]
		#'linuxwin/intelglmallocworkaround.cpp',		[$OSXALL]
		#'linuxwin/mach_override.c',					[$OSXALL]
		'linuxwin/cglmtex.cpp',		
		'linuxwin/cglmfbo.cpp',		
		'linuxwin/cglmprogram.cpp',	
		'linuxwin/cglmbuffer.cpp',	
		'linuxwin/cglmquery.cpp',
		'linuxwin/asanstubs.cpp',
		'linuxwin/decompress.c'
	]

	includes = [
		'.',
		'../public',
		'../public/tier0',
		'../public/tier1'
	] + bld.env.INCLUDES_SDL2

	defines = []

	libs = ['tier0','tier1','tier2','vstdlib','mathlib']

	install_path = bld.env.LIBDIR

	bld.shlib(
		source   = source,
		target   = PROJECT_NAME,
		name     = PROJECT_NAME,
		features = 'c cxx',
		includes = includes,
		defines  = defines,
		use      = libs,
		install_path = install_path,
		subsystem = bld.env.MSVC_SUBSYSTEM,
		idx      = bld.get_taskgen_count()
	)

